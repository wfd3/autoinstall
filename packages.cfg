# This is a real-world example of a package configuration file.  It installs a bunch of packages, sets 
# up the system, and then does some post-install configuration.
#

# Secure apt
apt-transport-https
gpg

# System automation
ansible
curl
wget
git
rsync

# Basic commandline sanity
apt-file
net-tools
minicom
ncal
iperf
dos2unix
nmon
atop
glance
tcsh:
  postscript: \
    echo "Updating /etc/shells to include tcsh" \
    echo "/bin/tcsh" >> /etc/shells
htop
atop
emacs
finger

# Serial comms
cu
putty
minicom

# 6502 
cc65

# Desktop tools
fonts-noto
gnome-tweaks
solaar
ghex

# Retro computing
srecord
simh

# For Sendmail/DKIM
opendkim
sasl2-bin
sendmail  # TODO: Run post install configuration

# Autofs/NFS
autofs:
  postscript: \
    # Add /m to auto.master \
    echo "#" >> /etc/auto.master \
    echo "# Add mount point for Homenet" >> /etc/auto.master \
    echo "/m              /etc/auto.homenet" >> /etc/auto.master \
    # add entries to auto.homenet \
    rm -f /etc/auto.homenet \
    echo "slow    -soft,intr,resvport,rw  nas:/mnt/slow" >> /etc/auto.homenet \
    echo "fast    -soft,intr,resvport,rw  nas:/mnt/fast" >> /etc/auto.homenet \
    echo "work    -soft,intr,resvport,rw  talisker:/work" >> /etc/auto.homenet \
    # restart autofs \
    systemctl restart autofs.service

# SSHD
openssh-server:
  postscript: \
    # Enable and start sshd \
    systemctl enable ssh \
    systemctl start ssh

# Software Development
libfmt-dev
libreadline-dev
golang
autoconf
byacc
bison

# for MAME
build-essential
python3
libsdl2-dev
libsdl2-ttf-dev
libfontconfig-dev
libpulse-dev
qtbase5-dev
qtbase5-dev-tools
qtchooser
qt5-qmake
make
cmake
# for Attract Mode
libsfml-dev
libopenal-dev
libfreetype-dev
libavformat-dev
libavcodec-dev
libswscale-dev
libavutil-dev
libswresample-dev
libopengl-dev
libjpeg-dev
libxrandr-dev
libcurl4-openssl-dev
libarchive-dev
libfontconfig-dev
meld
pipx
libpython3-dev

# Direct download packages
code: 
  deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64

# Google Chrome
google-chrome-stable:
  prescript: wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - 
  source: google-chrome.list deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main

# Kicad
kicad:
  repo: ppa:kicad/kicad-8.0-releases
#temurin-17-jre -- Check this?

spotify-client: 
  script: wget -q -O - https://download.spotify.com/debian/pubkey_C85668DF69375001.gpg | gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/spotify.gpg
  source: spotify.list deb http://repository.spotify.com stable non-free

__PREP_SYSTEM__:
# Fix resolv.conf for the local network, turn off apt phasing, and run 'apt update' and 'apt upgrade' 
# before installing anything else.
  flags: start, no_apt
  script: \
    # Turn off resolved \
    echo "Disabling resloved" \
    systemctl disable systemd-resolved.service \
    systemtcl stop systemd-resolved.service \
    # Update /etc/resolv.conf \
    echo "Rewriting /etc/resolv.conf" \
    rm /etc/resolv.conf \
    echo "# Not managed by systemd" >> /etc/resolv.conf \
    echo "nameserver 10.0.0.2" >> /etc/resolv.conf \
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf \
    echo "search home.drummond.us dhcp.drummond.us tahoe.drummond.us drummond.us" >> /etc/resolv.conf \
    rm /etc/update-motd.d/10-help-text \
    # Turn off apt pacing \
    echo "Disable APT phasing" \
    rm -f /etc/apt/apt.conf.d/99-phased-updates \
    echo "# Disable phased/rolling updates" >> /etc/apt/apt.conf.d/99-phased-updates \
    echo "Update-Manager::Always-Include-Phased-Updates true;" >> /etc/apt/apt.conf.d/99-phased-updates \
    echo "APT::Get::Always-Include-Phased-Updates true;" >> /etc/apt/apt.conf.d/99-phased-updates \
  postscript: \
    # Run apt update  and apt upgrade \
    echo "Running apt update"\
    apt update \
    echo "Running apt upgrade" \
    apt -y upgrade

__SHELL__:
# Set up my shell environment
# - Setup sudoers
# - Add me to sudo group
# - Change my UID to match the NAS
# - Change my shell to tcsh
# - Copy my shell config over with Ansible
# - Make symlinks to the NAS
# TODO: 
# - Install my SSH keys (can I do this?)
  flags: end, no_apt
  script: \
    # Setup sudo \
    cp /m/slow/configs/sudo/sudoers /etc/sudoers 
    # Make sure I'm in group 'sudo' \
    adduser --quiet walt sudo \
    # Change my UID \
    if sed -i.bak -e 's/^walt:[^:]*:\([0-9]*\):/walt:x:1501:/' /etc/passwd && ! cmp -s /etc/passwd /etc/passwd.bak; then \
      homedir=$(awk -F: '/^walt:/ {print $6}' /etc/passwd) \
      find "$homedir" -user walt -exec chown 1501 {} \; \
    fi \
    rm -f /etc/passwd.bak
    # Change my shell to tcsh \
    if [ "$(getent passwd walt | cut -d: -f7)" != "/bin/tcsh" ]; then \
      chsh -s /bin/tcsh walt \
    fi \
    # Copy my shell config over with Ansible \
    echo "Copying shell config" \
    ansible-playbook -i "localhost," --connection=local --user=walt /m/slow/config/shell/shell.playbook.yml \
    # Make symlinks to the nas \
    ln -s /m/slow ~/walt/slow \
    ln -s /m/fast ~/walt/fast \
    ln -s /m/slow/RetroComputers ~/walt/RetroComputers \
    ln -s /m/slow ~/walt/Desktop/slow \
    ln -s /m/fast ~/walt/Desktop/fast \
    ln -s /m/slow/RetroComputers ~/walt/Desktop/RetroComputers 
    

__SYSTEM_SETUP_POST_INSTALL__:
# After everything else is installed, do some system setup.  Specifically:
# - Disable IPv6 in sysctl.conf and for Grub
# - Remove Ubuntu help hints
# - Remove unneeded packages
  flags: end, no_apt
  script: \
    # Turn of IPv6 \
    echo "Disabling IPv6" \
    if ! grep -q "^net.ipv6.conf.all.disable_ipv6 = 1" /etc/sysctl.conf; then \
      echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf \
      echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf \
      echo "net.ipv6.conf.lo.disable_ipv6 = 1" >> /etc/sysctl.conf \
      sysctl -p \
    fi \
    # Remove Ubuntu adverts \
    echo "Removing Ubuntu help hints" \
    # Update GRUB_CMDLINE_LINUX if ipv6.disable=1 not already present \
    if ! grep -q "^GRUB_CMDLINE_LINUX=.*ipv6\.disable=1" /etc/default/grub; then \
      if grep -q "^GRUB_CMDLINE_LINUX=" /etc/default/grub; then \
        sed -i 's/^GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="\1 ipv6.disable=1"/' /etc/default/grub \
      else \
        echo 'GRUB_CMDLINE_LINUX="ipv6.disable=1"' >> /etc/default/grub \
    fi \
    fi \
    # Update GRUB_CMDLINE_LINUX_DEFAULT if ipv6.disable=1 not already present \
    if ! grep -q "^GRUB_CMDLINE_LINUX_DEFAULT=.*ipv6\.disable=1" /etc/default/grub; then \
        if grep -q "^GRUB_CMDLINE_LINUX_DEFAULT=" /etc/default/grub; then \
          sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 ipv6.disable=1"/' /etc/default/grub \
        else \
          echo 'GRUB_CMDLINE_LINUX_DEFAULT="ipv6.disable=1"' >> /etc/default/grub \
        fi \
    fi\
    # Update GRUB \
    update-grub \
    echo "Remove unneeded packages" \
    apt -y autoremove

